import React, { useState, useRef } from "react";
import {
  Box,
  Typography,
  TextField,
  Button,
  Container,
  CircularProgress,
  Grid
} from "@mui/material";
import Link from "next/link";
import { useRouter } from "next/router";

const BienEtre = () => {
  const router = useRouter();
  const rawUser = router.query.user;
  const username = typeof rawUser === "string" ? rawUser : "invit√©";

  // √âtats pour recueillir les informations li√©es au bien-√™tre
  const [situation, setSituation] = useState(""); // Ex: "J'ai un conflit avec un ami", "Je cherche une id√©e de cadeau..."
  const [objectif, setObjectif] = useState("");  // Ex: "R√©soudre le conflit", "Am√©liorer ma communication", ...
  const [hobbies, setHobbies] = useState("");    // Ex: "J'aime la pop music, la photographie..."
  const [budget, setBudget] = useState("");      // Pour id√©es de cadeau, par ex.
  const [etatEmotif, setEtatEmotif] = useState(""); // Ex: "stress√©", "heureux mais en manque d'inspiration", etc.

  const [reponseBienEtre, setReponseBienEtre] = useState("");
  const [loading, setLoading] = useState(false);

  const audioRef = useRef<HTMLAudioElement>(null);

  // Fonction pour envoyer le prompt
  const proposeIdees = async () => {
    if (audioRef.current) {
      audioRef.current.play().catch((err) => console.error("Erreur audio:", err));
    }
    setLoading(true);

    // Exemple de prompt
    const prompt = `
Tu es Francisco, un assistant bien-√™tre qui propose des id√©es et du soutien dans la vie de tous les jours. 
Tu n'es pas un th√©rapeute professionnel, juste un ami qui donne des conseils pratiques et des pistes positives.

Informations :
- Contexte / probl√®me : ${situation || "non pr√©cis√©"}
- Objectif recherch√© : ${objectif || "non d√©fini"}
- Centres d'int√©r√™t : ${hobbies || "pas mentionn√©"}
- Budget ou contraintes financi√®res : ${budget || "non pr√©cis√©"}
- √âtat √©motionnel : ${etatEmotif || "inconnu"}

Propose :
1) Quelques strat√©gies de communication / dialogue / r√©solution, si c'est un conflit ou un blocage
2) Des id√©es de cadeau ou de surprise, si c'est pertinent
3) Des suggestions de musique, de film, ou d'autres activit√©s, selon les go√ªts et le budget
4) Un message d'encouragement, rassurant, incitant au dialogue constructif

N'utilise pas de symboles Markdown. Tu peux utiliser la balise <b> (sans fermeture) pour mettre en valeur un titre ou un mot.
Ajoute des √©mojis adapt√©s (üí°, üéÅ, üé∂, üé•, üó£Ô∏è, ‚ù§Ô∏è) pour rendre le message plus chaleureux.
    `;

    try {
      const response = await fetch("/api/bien-etre", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt }),
      });

      if (!response.ok) {
        console.error("Erreur de l'API bien-√™tre:", response.statusText);
      }

      const data = await response.json();
      setReponseBienEtre(data.response || "Aucune suggestion re√ßue.");
    } catch (error) {
      console.error("Erreur lors de la demande d'aide au bien-√™tre:", error);
    } finally {
      setLoading(false);
    }
  };

  // Styles
  const textFieldStyles = {
    "& .MuiOutlinedInput-root": {
      backgroundColor: "#fff",
      "& fieldset": { borderColor: "#aaa" },
      "&:hover fieldset": { borderColor: "#000" },
      "&.Mui-focused fieldset": { borderColor: "#2196f3" },
      "& input, & textarea": { color: "#000" },
    },
    "& .MuiInputLabel-root": { color: "#000" },
  };

  return (
    <Container
      maxWidth="md"
      sx={{
        py: 4,
        backgroundColor: "#f4f4f4",
        borderRadius: 2,
        color: "#000"
      }}
    >
      <audio ref={audioRef} src="/down.mp3" preload="auto" />

      <Typography variant="h4" gutterBottom>
        Conseils bien-√™tre
      </Typography>
      <Typography variant="body1" gutterBottom>
        Bonjour {username}! Adoptez des rituels simples et efficaces pour am√©liorer votre quotidien et cultiver le bien-√™tre. 
        Partagez votre situation, et je ferai de mon mieux pour proposer des pistes positives !
      </Typography>

      {/* Formulaire */}
      <Box sx={{ maxWidth: 600, mx: "auto", mt: 3 }}>
        <Grid container spacing={2}>
          <Grid item xs={12}>
            <TextField
              label="Quelle est la situation ou le probl√®me ?"
              variant="outlined"
              fullWidth
              value={situation}
              onChange={(e) => setSituation(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Quel est votre objectif ?"
              variant="outlined"
              fullWidth
              value={objectif}
              onChange={(e) => setObjectif(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Quels sont vos go√ªts (musique, films, hobbies...) ?"
              variant="outlined"
              fullWidth
              value={hobbies}
              onChange={(e) => setHobbies(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Y a-t-il un budget √† respecter ?"
              variant="outlined"
              fullWidth
              value={budget}
              onChange={(e) => setBudget(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Comment vous sentez-vous ? (stress√©, joyeux...)"
              variant="outlined"
              fullWidth
              value={etatEmotif}
              onChange={(e) => setEtatEmotif(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
        </Grid>

        <Box sx={{ textAlign: "center", mt: 2 }}>
          <Button variant="contained" color="primary" onClick={proposeIdees} disabled={loading}>
            Propose-moi des pistes
          </Button>
        </Box>
      </Box>

      {loading && (
        <Box sx={{ textAlign: "center", my: 2 }}>
          <CircularProgress />
        </Box>
      )}

      {/* R√©ponse */}
      {reponseBienEtre && (
        <Box sx={{ mt: 4, maxWidth: 600, mx: "auto" }}>
          <Typography variant="h5" gutterBottom>
            Suggestions pour le bien-√™tre :
          </Typography>
          <Typography
            variant="body1"
            sx={{
              whiteSpace: "pre-line",
              backgroundColor: "#f0f0f0",
              p: 2,
              borderRadius: 2,
            }}
          >
            {reponseBienEtre}
          </Typography>
        </Box>
      )}

      <Box sx={{ mt: 4, textAlign: "center" }}>
        <Link href={`/?user=${encodeURIComponent(username)}`} passHref legacyBehavior>
          <Button component="a" variant="outlined" color="secondary">
            Retour √† l&apos;accueil
          </Button>
        </Link>
      </Box>
    </Container>
  );
};

export default BienEtre;