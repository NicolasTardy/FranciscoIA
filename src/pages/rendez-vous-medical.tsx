import React, { useState, useRef } from "react";
import {
  Box,
  Typography,
  TextField,
  Button,
  Container,
  CircularProgress,
  Grid
} from "@mui/material";
import Link from "next/link";
import { useRouter } from "next/router";

const RendezVousMedical = () => {
  const router = useRouter();
  const rawUser = router.query.user;
  const username = typeof rawUser === "string" ? rawUser : "invit√©";

  // √âtats pour recueillir les infos
  const [professionnel, setProfessionnel] = useState(""); // ex: g√©n√©raliste, dentiste, ophtalmo, etc.
  const [localisation, setLocalisation] = useState("");   // ex: "Paris 12e"
  const [disponibilites, setDisponibilites] = useState(""); // ex: "Plut√¥t en soir√©e, en semaine"
  const [motif, setMotif] = useState(""); // ex: "contr√¥le annuel", "douleurs dentaires", etc.
  const [assurance, setAssurance] = useState(""); // ex: "Mutuelle X, carte vitale", etc.

  // R√©ponse de l'API
  const [suggestionRDV, setSuggestionRDV] = useState("");
  const [loading, setLoading] = useState(false);

  // Son
  const audioRef = useRef<HTMLAudioElement>(null);

  // Fonction d'envoi
  const proposeRdv = async () => {
    if (audioRef.current) {
      audioRef.current.play().catch((err) => console.error("Erreur audio:", err));
    }
    setLoading(true);

    const prompt = `
Tu es Francisco, un assistant qui aide √† planifier un rendez-vous m√©dical, sans donner de conseils de sant√© ou de diagnostic.
Voici les informations :
- Type de professionnel recherch√© : ${professionnel || "non pr√©cis√©"}
- Lieu souhait√© : ${localisation || "non pr√©cis√©"}
- Disponibilit√©s : ${disponibilites || "non pr√©cis√©es"}
- Motif principal du rendez-vous : ${motif || "non pr√©cis√©"}
- Informations d'assurance ou mutuelle : ${assurance || "non pr√©cis√©"}

Propose :
1) Le type de docteur adapt√© √† la situation (si diff√©rent de celui indiqu√©)
2) Les cr√©neaux ou options possibles (journ√©es/horaires) 
3) Les √©ventuels papiers ou documents √† apporter (ordonnances, carte vitale, etc.)
4) Les questions √† poser au professionnel pour clarifier le motif 
5) Rappelle que ce n'est pas un diagnostic ni un avis m√©dical, juste une aide pour organiser le RDV

N'utilise pas de symboles Markdown. Tu peux utiliser la balise <b> (sans fermeture) pour souligner un titre ou un mot.
Ajoute des emojis adapt√©s (üè•, üìÖ, ü©∫...) si tu veux rendre le texte plus convivial.
    `;

    try {
      const response = await fetch("/api/rendez-vous-medical", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt }),
      });

      if (!response.ok) {
        console.error("Erreur de l'API RDV m√©dical:", response.statusText);
      }

      const data = await response.json();
      setSuggestionRDV(data.response || "Aucune suggestion re√ßue.");
    } catch (error) {
      console.error("Erreur lors de la demande de RDV:", error);
    } finally {
      setLoading(false);
    }
  };

  // Styles pour TextField
  const textFieldStyles = {
    "& .MuiOutlinedInput-root": {
      backgroundColor: "#fff",
      "& fieldset": { borderColor: "#aaa" },
      "&:hover fieldset": { borderColor: "#000" },
      "&.Mui-focused fieldset": { borderColor: "#2196f3" },
      "& input": { color: "#000" },
    },
    "& .MuiInputLabel-root": { color: "#000" },
  };

  return (
    <Container
      maxWidth="md"
      sx={{
        py: 4,
        backgroundColor: "#f4f4f4",
        borderRadius: 2,
        color: "#000"
      }}
    >
      <audio ref={audioRef} src="/go.wav" preload="auto" />

      <Typography variant="h4" gutterBottom>
        Rendez-vous m√©dical
      </Typography>
      <Typography variant="body1" gutterBottom>
        Bonjour {username}! Organisez et suivez vos consultations pour une gestion simplifi√©e
        de votre sant√©. Je ne donne pas de conseils m√©dicaux, mais je peux t&apos;aider √† pr√©parer ton RDV.
      </Typography>

      {/* Formulaire */}
      <Box sx={{ maxWidth: 600, mx: "auto", mt: 3 }}>
        <Grid container spacing={2}>
          <Grid item xs={12}>
            <TextField
              label="Type de professionnel (g√©n√©raliste, dentiste...)"
              variant="outlined"
              fullWidth
              value={professionnel}
              onChange={(e) => setProfessionnel(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Localisation (ville, arrondissement...)"
              variant="outlined"
              fullWidth
              value={localisation}
              onChange={(e) => setLocalisation(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Disponibilit√©s (ex: soir√©es, WE...)"
              variant="outlined"
              fullWidth
              value={disponibilites}
              onChange={(e) => setDisponibilites(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Motif (ex: contr√¥le annuel, douleurs, etc.)"
              variant="outlined"
              fullWidth
              value={motif}
              onChange={(e) => setMotif(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Assurance ou mutuelle (ex: carte vitale, mutuelle X...)"
              variant="outlined"
              fullWidth
              value={assurance}
              onChange={(e) => setAssurance(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
        </Grid>

        <Box sx={{ textAlign: "center", mt: 2 }}>
          <Button variant="contained" color="primary" onClick={proposeRdv} disabled={loading}>
            Propose-moi un RDV
          </Button>
        </Box>
      </Box>

      {loading && (
        <Box sx={{ textAlign: "center", my: 2 }}>
          <CircularProgress />
        </Box>
      )}

      {suggestionRDV && (
        <Box sx={{ mt: 4, maxWidth: 600, mx: "auto" }}>
          <Typography variant="h5" gutterBottom>
            Suggestion de RDV :
          </Typography>
          <Typography
            variant="body1"
            sx={{
              whiteSpace: "pre-line",
              backgroundColor: "#f0f0f0",
              p: 2,
              borderRadius: 2,
            }}
          >
            {suggestionRDV}
          </Typography>
        </Box>
      )}

      {/* Bouton de retour */}
      <Box sx={{ mt: 4, textAlign: "center" }}>
        <Link href={`/?user=${encodeURIComponent(username)}`} passHref legacyBehavior>
          <Button component="a" variant="outlined" color="secondary">
            Retour √† l&apos;accueil
          </Button>
        </Link>
      </Box>
    </Container>
  );
};

export default RendezVousMedical;