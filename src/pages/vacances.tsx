import React, { useState, useRef } from "react";
import {
  Box,
  Typography,
  TextField,
  Button,
  Container,
  CircularProgress,
  Grid
} from "@mui/material";
import Link from "next/link";
import { useRouter } from "next/router";

const Vacances = () => {
  const router = useRouter();

  // V√©rifie si router.query.user est un tableau ou une cha√Æne
  // Si c'est un tableau ou undefined, on met "invit√©"
  const rawUser = router.query.user;
  const username = typeof rawUser === "string" ? rawUser : "invit√©";

  // √âtat du formulaire
  const [destination, setDestination] = useState("");
  const [nbJours, setNbJours] = useState("");
  const [nbPersonnes, setNbPersonnes] = useState("");
  const [budget, setBudget] = useState("");
  const [typeVoyage, setTypeVoyage] = useState(""); // ex: "Baln√©aire", "Culturel", "Montagne", etc.
  const [besoinsSpeciaux, setBesoinsSpeciaux] = useState(""); // ex: "Accessibilit√© PMR", "Chiens accept√©s", ...
  
  // R√©ponse de l'API
  const [planVacances, setPlanVacances] = useState("");
  const [loading, setLoading] = useState(false);

  // Pour jouer un son
  const audioRef = useRef<HTMLAudioElement>(null);

  // Fonction d'envoi du prompt
  const genereItineraire = async () => {
    // Lecture du son
    if (audioRef.current) {
      audioRef.current.play().catch((err) => console.error("Erreur audio:", err));
    }

    setLoading(true);

    // Construction du prompt
    const prompt = `
G√©n√®re un itin√©raire de vacances √† ${destination} pour ${nbPersonnes || "un certain nombre de"} personnes. 
Dur√©e: ${nbJours || "un nombre ind√©fini"} jours.
Budget: ${budget || "non pr√©cis√©"}.
Type de voyage souhait√©: ${typeVoyage || "non d√©fini"}.
Contraintes ou besoins sp√©ciaux: ${besoinsSpeciaux || "aucun"}.

Donne des id√©es d'activit√©s, d'h√©bergements, et de transports pour chaque jour.
Sois rassurant, et ajoute quelques conseils sur la culture locale ou la gastronomie. 
Propose un co√ªt approximatif et le mat√©riel recommand√© (valises, v√™tements, etc.).
N'utilise pas de symboles Markdown. Utilise seulement la balise <b> (sans fermeture) si tu veux mettre en relief un titre ou un mot.
Ajoute des emojis adapt√©s (‚õµ, ‚úàÔ∏è, üèùÔ∏è, etc.) quand tu d√©cris les activit√©s.
    `;

    try {
      const response = await fetch("/api/vacances", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt }),
      });

      if (!response.ok) {
        console.error("Erreur de l'API Vacances:", response.statusText);
      }

      const data = await response.json();
      setPlanVacances(data.response || "Aucune suggestion re√ßue.");
    } catch (error) {
      console.error("Erreur lors de la demande d'itin√©raire:", error);
    } finally {
      setLoading(false);
    }
  };

  // Styles pour champs de texte
  const textFieldStyles = {
    "& .MuiOutlinedInput-root": {
      backgroundColor: "#fff",
      "& fieldset": { borderColor: "#aaa" },
      "&:hover fieldset": { borderColor: "#000" },
      "&.Mui-focused fieldset": { borderColor: "#2196f3" },
      "& input": { color: "#000" },
    },
    "& .MuiInputLabel-root": { color: "#000" },
  };

  return (
    <Container
      maxWidth="md"
      sx={{
        py: 4,
        backgroundColor: "#f4f4f4",
        borderRadius: 2,
        color: "#000"
      }}
    >
      <audio ref={audioRef} src="/go.wav" preload="auto" />

      <Typography variant="h4" gutterBottom>
        Planification de vacances
      </Typography>
      <Typography variant="body1" gutterBottom>
        Bonjour {username}! Cr√©ez des voyages sur mesure et planifiez des vacances
        remplies d&apos;aventures et de d√©couvertes.
      </Typography>

      {/* Formulaire */}
      <Box sx={{ maxWidth: 600, mx: "auto", mt: 3 }}>
        <Grid container spacing={2}>
          <Grid item xs={12}>
            <TextField
              label="Destination"
              variant="outlined"
              fullWidth
              value={destination}
              onChange={(e) => setDestination(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Nombre de jours"
              variant="outlined"
              fullWidth
              type="number"
              value={nbJours}
              onChange={(e) => setNbJours(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Nombre de personnes"
              variant="outlined"
              fullWidth
              type="number"
              value={nbPersonnes}
              onChange={(e) => setNbPersonnes(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Budget (ex: 2000‚Ç¨)"
              variant="outlined"
              fullWidth
              value={budget}
              onChange={(e) => setBudget(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Type de voyage (mer, montagne, culturel...)"
              variant="outlined"
              fullWidth
              value={typeVoyage}
              onChange={(e) => setTypeVoyage(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Besoins sp√©ciaux ? (animaux, PMR...)"
              variant="outlined"
              fullWidth
              value={besoinsSpeciaux}
              onChange={(e) => setBesoinsSpeciaux(e.target.value)}
              sx={textFieldStyles}
            />
          </Grid>
        </Grid>

        {/* Bouton */}
        <Box sx={{ textAlign: "center", mt: 2 }}>
          <Button variant="contained" color="primary" onClick={genereItineraire} disabled={loading}>
            G√©n√®re mon itin√©raire
          </Button>
        </Box>
      </Box>

      {/* Loading */}
      {loading && (
        <Box sx={{ textAlign: "center", my: 2 }}>
          <CircularProgress />
        </Box>
      )}

      {/* Affichage du r√©sultat */}
      {planVacances && (
        <Box sx={{ mt: 4, maxWidth: 600, mx: "auto" }}>
          <Typography variant="h5" gutterBottom>
            Itin√©raire propos√© :
          </Typography>
          <Typography
            variant="body1"
            sx={{
              whiteSpace: "pre-line",
              backgroundColor: "#f0f0f0",
              p: 2,
              borderRadius: 2,
            }}
          >
            {planVacances}
          </Typography>
        </Box>
      )}

      {/* Retour accueil */}
      <Box sx={{ mt: 4, textAlign: "center" }}>
        <Link href={`/?user=${encodeURIComponent(username)}`} passHref legacyBehavior>
          <Button component="a" variant="outlined" color="secondary">
            Retour √† l&apos;accueil
          </Button>
        </Link>
      </Box>
    </Container>
  );
};

export default Vacances;